
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.DiscoveriesScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  typeform_id: 'typeform_id',
  BMR: 'BMR',
  carbs_macronutrients: 'carbs_macronutrients',
  protein_macronutrients: 'protein_macronutrients',
  fat_macronutrients: 'fat_macronutrients',
  carbs_per_meal: 'carbs_per_meal',
  protein_per_meal: 'protein_per_meal',
  fat_per_meal: 'fat_per_meal',
  calorie_per_meal: 'calorie_per_meal'
});

exports.Prisma.CustomersScalarFieldEnum = makeEnum({
  id: 'id',
  uuid: 'uuid',
  email: 'email',
  age: 'age',
  weightKg: 'weightKg',
  heightCm: 'heightCm',
  gender: 'gender',
  activeLevel: 'activeLevel',
  mealsPerDay: 'mealsPerDay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerNutritionNeedScalarFieldEnum = makeEnum({
  customerNutritionNeedId: 'customerNutritionNeedId',
  customerId: 'customerId',
  nutritionValue: 'nutritionValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomerNutritionNeedScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerMedicalConditionScalarFieldEnum = makeEnum({
  medicalConditionValue: 'medicalConditionValue',
  customerMedicalConditionId: 'customerMedicalConditionId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomerMedicalConditionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerFoodTypeScalarFieldEnum = makeEnum({
  productFoodTypeId: 'productFoodTypeId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductFoodTypeScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateProductFoodTypeScalarFieldEnum = makeEnum({
  productFoodTypeId: 'productFoodTypeId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  activeStatus: 'activeStatus',
  name: 'name',
  label: 'label',
  ingredientLabel: 'ingredientLabel',
  allergenLabel: 'allergenLabel',
  expertComment: 'expertComment',
  productProviderId: 'productProviderId',
  productCategoryId: 'productCategoryId',
  productFlavorId: 'productFlavorId',
  productVendorId: 'productVendorId',
  externalSku: 'externalSku',
  upcCode: 'upcCode',
  MSP: 'MSP',
  WSP: 'WSP',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductImageScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  src: 'src',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateProductCookingMethodScalarFieldEnum = makeEnum({
  productId: 'productId',
  productCookingMethodId: 'productCookingMethodId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerUnavailableCookingMethodScalarFieldEnum = makeEnum({
  customerId: 'customerId',
  productCookingMethodId: 'productCookingMethodId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductCookingMethodScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductFlavorScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductVendorScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerFlavorDislikeScalarFieldEnum = makeEnum({
  productFlavorId: 'productFlavorId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  src: 'src',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerCategoryPreferenceScalarFieldEnum = makeEnum({
  productCategoryId: 'productCategoryId',
  customerId: 'customerId',
  rank: 'rank',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateProductIngredientScalarFieldEnum = makeEnum({
  productId: 'productId',
  productIngredientId: 'productIngredientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductIngredientScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerIngredientDislikeScalarFieldEnum = makeEnum({
  productIngredientId: 'productIngredientId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateProductAllergenScalarFieldEnum = makeEnum({
  productId: 'productId',
  productAllergenId: 'productAllergenId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductAllergenScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateCustomerAllergenScalarFieldEnum = makeEnum({
  customerId: 'customerId',
  productAllergenId: 'productAllergenId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductNutritionFactScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  servingSize: 'servingSize',
  calories: 'calories',
  totalFatG: 'totalFatG',
  saturatedFatG: 'saturatedFatG',
  transFatG: 'transFatG',
  cholesteroleMg: 'cholesteroleMg',
  sodiumMg: 'sodiumMg',
  totalCarbohydrateG: 'totalCarbohydrateG',
  dietaryFiberG: 'dietaryFiberG',
  totalSugarG: 'totalSugarG',
  addedSugarG: 'addedSugarG',
  proteinG: 'proteinG',
  sweet: 'sweet',
  sour: 'sour',
  salty: 'salty',
  bitter: 'bitter',
  spicy: 'spicy',
  texture: 'texture',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProductProviderScalarFieldEnum = makeEnum({
  id: 'id',
  provider: 'provider',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SurveyScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateSurveyQuestionScalarFieldEnum = makeEnum({
  surveyId: 'surveyId',
  displayOrder: 'displayOrder',
  surveyQuestionId: 'surveyQuestionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SurveyQuestionScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  label: 'label',
  questionCategoryId: 'questionCategoryId',
  mustBeAnswered: 'mustBeAnswered',
  instruction: 'instruction',
  placeholder: 'placeholder',
  surveyQuestionAnswerTypeId: 'surveyQuestionAnswerTypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionCategoryScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SurveyQuestionAnswerTypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SurveyQuestionOptionScalarFieldEnum = makeEnum({
  id: 'id',
  label: 'label',
  name: 'name',
  surveyQuestionId: 'surveyQuestionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SurveyQuestionAnswerScalarFieldEnum = makeEnum({
  id: 'id',
  responseId: 'responseId',
  customerId: 'customerId',
  surveyQuestionId: 'surveyQuestionId',
  answerSingleOptionId: 'answerSingleOptionId',
  answerNumeric: 'answerNumeric',
  answerText: 'answerText',
  answerBool: 'answerBool',
  reason: 'reason',
  title: 'title',
  content: 'content',
  answerCount: 'answerCount',
  productId: 'productId',
  orderNumber: 'orderNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediateSurveyQuestionAnswerProductScalarFieldEnum = makeEnum({
  surveyQuestionAnswerId: 'surveyQuestionAnswerId',
  surveyQuestionOptionId: 'surveyQuestionOptionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomerProductDistanceScalarFieldEnum = makeEnum({
  id: 'id',
  distance: 'distance',
  productId: 'productId',
  customerId: 'customerId',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CustomerBoxItemsScalarFieldEnum = makeEnum({
  id: 'id',
  productId: 'productId',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QueuedShopifyOrderScalarFieldEnum = makeEnum({
  id: 'id',
  customerId: 'customerId',
  orderName: 'orderName',
  status: 'status',
  scheduledAt: 'scheduledAt',
  orderedAt: 'orderedAt',
  fulfilledAt: 'fulfilledAt'
});

exports.Prisma.PractitionerScalarFieldEnum = makeEnum({
  id: 'id',
  uuid: 'uuid',
  email: 'email',
  phoneNumber: 'phoneNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PractitionerSocialMediaScalarFieldEnum = makeEnum({
  id: 'id',
  practitionerId: 'practitionerId',
  instagram: 'instagram',
  facebook: 'facebook',
  twitter: 'twitter',
  website: 'website',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PractitionerBoxScalarFieldEnum = makeEnum({
  id: 'id',
  practitionerId: 'practitionerId',
  label: 'label',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IntermediatePractitionerBoxProductScalarFieldEnum = makeEnum({
  practitionerBoxId: 'practitionerBoxId',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PractitionerCustomerOrderHistoryScalarFieldEnum = makeEnum({
  id: 'id',
  customerId: 'customerId',
  practitionerBoxId: 'practitionerBoxId',
  orderNumber: 'orderNumber',
  purchasePrice: 'purchasePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.ActiveStatus = makeEnum({
  active: 'active',
  inactive: 'inactive'
});

exports.QueueStatus = makeEnum({
  scheduled: 'scheduled',
  ordered: 'ordered',
  fulfilled: 'fulfilled'
});

exports.Prisma.ModelName = makeEnum({
  Discoveries: 'Discoveries',
  Customers: 'Customers',
  IntermediateCustomerNutritionNeed: 'IntermediateCustomerNutritionNeed',
  CustomerNutritionNeed: 'CustomerNutritionNeed',
  IntermediateCustomerMedicalCondition: 'IntermediateCustomerMedicalCondition',
  CustomerMedicalCondition: 'CustomerMedicalCondition',
  IntermediateCustomerFoodType: 'IntermediateCustomerFoodType',
  ProductFoodType: 'ProductFoodType',
  IntermediateProductFoodType: 'IntermediateProductFoodType',
  Product: 'Product',
  ProductImage: 'ProductImage',
  IntermediateProductCookingMethod: 'IntermediateProductCookingMethod',
  IntermediateCustomerUnavailableCookingMethod: 'IntermediateCustomerUnavailableCookingMethod',
  ProductCookingMethod: 'ProductCookingMethod',
  ProductFlavor: 'ProductFlavor',
  ProductVendor: 'ProductVendor',
  IntermediateCustomerFlavorDislike: 'IntermediateCustomerFlavorDislike',
  ProductCategory: 'ProductCategory',
  IntermediateCustomerCategoryPreference: 'IntermediateCustomerCategoryPreference',
  IntermediateProductIngredient: 'IntermediateProductIngredient',
  ProductIngredient: 'ProductIngredient',
  IntermediateCustomerIngredientDislike: 'IntermediateCustomerIngredientDislike',
  IntermediateProductAllergen: 'IntermediateProductAllergen',
  ProductAllergen: 'ProductAllergen',
  IntermediateCustomerAllergen: 'IntermediateCustomerAllergen',
  ProductNutritionFact: 'ProductNutritionFact',
  ProductProvider: 'ProductProvider',
  Survey: 'Survey',
  IntermediateSurveyQuestion: 'IntermediateSurveyQuestion',
  SurveyQuestion: 'SurveyQuestion',
  QuestionCategory: 'QuestionCategory',
  SurveyQuestionAnswerType: 'SurveyQuestionAnswerType',
  SurveyQuestionOption: 'SurveyQuestionOption',
  SurveyQuestionAnswer: 'SurveyQuestionAnswer',
  IntermediateSurveyQuestionAnswerProduct: 'IntermediateSurveyQuestionAnswerProduct',
  CustomerProductDistance: 'CustomerProductDistance',
  CustomerBoxItems: 'CustomerBoxItems',
  QueuedShopifyOrder: 'QueuedShopifyOrder',
  Practitioner: 'Practitioner',
  PractitionerSocialMedia: 'PractitionerSocialMedia',
  PractitionerBox: 'PractitionerBox',
  IntermediatePractitionerBoxProduct: 'IntermediatePractitionerBoxProduct',
  PractitionerCustomerOrderHistory: 'PractitionerCustomerOrderHistory'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
