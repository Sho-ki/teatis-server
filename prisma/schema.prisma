// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Discoveries {
  id        Int       @default(autoincrement()) @id
  email     String
  typeform_id   String
  BMR Int
  carbs_macronutrients    Int
  protein_macronutrients  Int
  fat_macronutrients Int
  carbs_per_meal Int
  protein_per_meal Int
  fat_per_meal Int
  calorie_per_meal Int
}

model Customers{
  id                      Int             @default(autoincrement()) @id
  email                   String
  intermediateCustomerNutritionNeeds IntermediateCustomerNutritionNeed[]
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerNutritionNeed{
  customerNutritionNeed    CustomerNutritionNeed   @relation(fields: [customerNutritionNeedId], references: [id])
  customerNutritionNeedId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  nutritionValue            Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerNutritionNeedId, customerId])
}

model CustomerNutritionNeed{
  id            Int       @default(autoincrement()) @id
  description   String?
  label         String @unique
  intermediateCustomerNutritionNeed      IntermediateCustomerNutritionNeed[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerMedicalCondition{
  medicalConditionValue String
  customerMedicalCondition CustomerMedicalCondition @relation(fields: [customerMedicalConditionId], references: [id])
  customerMedicalConditionId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerMedicalConditionId, customerId])
}


model CustomerMedicalCondition{
  id    Int     @default(autoincrement()) @id
  description   String?
  label String  @unique
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}



model Product{
  id                  Int             @default(autoincrement()) @id
  label String
  productPovider     ProductPovider @relation(fields: [productPoviderId], references: [id])
  productPoviderId  Int
  intermediateProductCategories IntermediateProductCategory[]
  productFlavor ProductFlavor @relation(fields: [productFlavorId], references: [id])
  productFlavorId Int
  intermediateProductIngredients IntermediateProductIngredient[]	
  intermediateProductAllergens IntermediateProductAllergen[]
  // customerProductPrefences CustomerProductPrefence[]
  externalId         Int
  upcCode  Int?
  productNutritionFact ProductNutritionFact?
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model ProductFlavor{
  id       Int         @default(autoincrement()) @id
  label String @unique
  products   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateProductCategory{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id])
  productCategoryId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productCategoryId])
}

model ProductCategory{
  id       Int         @default(autoincrement()) @id
  label String @unique
  intermediateProductCategories IntermediateProductCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateProductIngredient{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productIngredient   ProductIngredient   @relation(fields: [productIngredientId], references: [id])
  productIngredientId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productIngredientId])
}

model ProductIngredient{
  id       Int         @default(autoincrement()) @id
  label String @unique
  intermediateProductIngredients IntermediateProductIngredient[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateProductAllergen{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productAllergenId])
}

model ProductAllergen{
  id       Int         @default(autoincrement()) @id
  label String @unique
  intermediateProductAllergens IntermediateProductAllergen[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerAllergen{
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerId, productAllergenId])
}


model ProductNutritionFact{
  id                  Int             @default(autoincrement()) @id
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity	Int? 
  servingSize	Int? 
  calories Int?
  totalFatG Int?
  saturatedFatG Int?
  transFatG	Int? 
  cholesteroleMg	Int?
  sodiumMg	Int?
  totalCarbohydrateG	Int?
  dietaryFiberG	Int?
  totalSugarG	Int?
  addedSugarG	Int?
  proteinG	Int?
  sweet	Int?
  sour	Int?
  salty	Int?
  bitter	Int?
  spicy	Int?
  texture Texure	@default(medium)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

enum Texure {
  soft
  medium
  hard
}



model ProductPovider{
  id       Int         @default(autoincrement()) @id
  provider String  @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Survey{
  id                              Int       @default(autoincrement()) @id
  name String @unique
  intermediateSurveyQuestion IntermediateSurveyQuestion[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model IntermediateSurveyQuestion{
  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId Int
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyId, surveyQuestionId])
}

model SurveyQuestion{
  id  Int   @default(autoincrement()) @id
  name String
  label String @unique
  questionCategory QuestionCategory @relation(fields: [questionCategoryId], references: [id])
  questionCategoryId Int
  mustBeAnswered Boolean
  instruction String?
  placeholder String?
  surveyQuestionAnswerType SurveyQuestionAnswerType @relation(fields: [surveyQuestionAnswerTypeId], references: [id])
  surveyQuestionAnswerTypeId Int
  intermediateSurveyQuestion IntermediateSurveyQuestion[]
  surveyQuestionOptions SurveyQuestionOption[]
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model QuestionCategory {
  id  Int   @default(autoincrement()) @id
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionAnswerType{
  id  Int   @default(autoincrement()) @id
  name String
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionOption{
  id  Int   @default(autoincrement()) @id
  label String
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionAnswerServiceFeedback{
  id  Int   @default(autoincrement()) @id
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  answerOption SurveyQuestionOption? @relation(fields: [answerOptionId], references: [id])
  answerOptionId Int?
  // customerProductPrefence CustomerProductPrefence?
  answerNumeric Int?
  answerText String?
  answerBool Boolean?
  reason String?
  answerCount Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionAnswerProductFeedback{
  id  Int   @default(autoincrement()) @id
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  score Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  // customerProductPrefence CustomerProductPrefence?
  reason String?
  answerCount Int
  customerProductDistance CustomerProductDistance?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model CustomerProductDistance{
  id  Int   @default(autoincrement()) @id
  distance Float
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback @relation(fields: [surveyQuestionAnswerProductFeedbackId], references: [id])
  surveyQuestionAnswerProductFeedbackId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

// model CustomerProductPrefence{
//   id  Int   @default(autoincrement()) @id
//   product   Product @relation(fields: [productId], references: [id])
//   productId Int
//   surveyQuestionAnswer SurveyQuestionAnswer @relation(fields: [surveyQuestionAnswerId], references: [id])
//   surveyQuestionAnswerId Int
//   answerCount Int
//   customerProductPrefenceDistance CustomerProductPrefenceDistance?
// }

// model CustomerProductPrefenceDistance{
//   id  Int   @default(autoincrement()) @id
//   distance Float @default(1)
//   customerProductPrefence CustomerProductPrefence @relation(fields: [customerProductPrefenceId],  references: [id])
//   customerProductPrefenceId Int
// }






// model CustomerProductPrefDistance{
//   id                                    Int                  @default(autoincrement()) @id
//   distance                              Float
//   customer_product_pref                 CustomerProductPref @relation(fields: [customer_product_pref_id], references: [id])
//   customer_product_pref_id              Int
//   answer_count Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())

// }

// model CustomerProductPrefQuestionAnswer{
//   id                                Int                          @default(autoincrement()) @id
//   answer                            Boolean
//   answer_count                      Int
//   customer_product_pref_question    CustomerProductPrefQuestion @relation(fields: [customer_product_pref_question_id], references: [id])
//   customer_product_pref_question_id Int
//   customer_product_pref CustomerProductPref @relation(fields: [customer_product_pref_id], references: [id])
//   customer_product_pref_id Int
//   reason String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())
  
// }

// model CustomerProductPrefQuestion{
//   id                                    Int    @default(autoincrement()) @id
//   description                           String
//   label                                 String  @unique
//   index_id                              Int
//   customer_product_pref_question_answers CustomerProductPrefQuestionAnswer[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())
// }


// model MultipleOptionReview{
//   id          Int    @default(autoincrement()) @id
//   customer                        Customer @relation(fields: [customer_id], references: [id])
//   customer_id                     Int
//   review_question_option  ReviewQuestionOption @relation(fields: [review_question_option_id], references: [id])
//   review_question_option_id Int
//   answer_count  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())
// }

// model ReviewQuestion{
//   id Int    @default(autoincrement()) @id 
//   is_active Boolean
//   required Boolean
//   question String
//   instruction String?
//   label String  @unique
//   review_question_options ReviewQuestionOption[]
//   text_reviews TextReview[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())
// }

// model ReviewQuestionOption{
//   id Int    @default(autoincrement()) @id
//   multiple_option_reviews MultipleOptionReview[]
//   label String
//   review_question ReviewQuestion @relation(fields: [review_question_id], references: [id])
//   review_question_id Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())
// }


// model TextReview{
//   id Int    @default(autoincrement()) @id
//   customer                        Customer @relation(fields: [customer_id], references: [id])
//   customer_id                     Int
//   review_question ReviewQuestion @relation(fields: [review_question_id], references: [id])
//   review_question_id Int
//   answer String
//   answer_count Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @default(now())

// }







// Old tables
// model Customer{
//   id                      Int             @default(autoincrement()) @id
//   email                   String
//   customer_nutrition_items CustomerNutrition[]
//   customer_medical_conditions CustomerMedicalCondition[]
//   // customer_product_prefs   CustomerProductPref[]
//   // multiple_option_reviews MultipleOptionReview[]
//   // text_reviews TextReview[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt @default(now())
// }

// model CustomerNutrition{
//   customer_nutrition_item    CustomerNutritionItem   @relation(fields: [customer_nutrition_item_id], references: [id])
//   customer_nutrition_item_id Int
//   customer                   Customer                @relation(fields: [customer_id], references: [id])
//   customer_id                Int
//   nutrition_value            Int
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt @default(now())

//   @@id([customer_nutrition_item_id, customer_id])
// }

// model CustomerNutritionItem{
//   id            Int       @default(autoincrement()) @id
//   description   String
//   label         String @unique
//   customer_nutritions      CustomerNutrition[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt @default(now())
// }

// model CustomerMedicalCondition{
//   medical_condition_value String
//   customer_medical_condition_item CustomerMedicalConditionItem @relation(fields: [customer_medical_condition_item_id], references: [id])
//   customer_medical_condition_item_id Int
//   customer                   Customer                @relation(fields: [customer_id], references: [id])
//   customer_id                Int
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt @default(now())

//   @@id([customer_medical_condition_item_id, customer_id])
// }

// model CustomerMedicalConditionItem{
//   id    Int     @default(autoincrement()) @id
//   description   String
//   label String
//   customer_medical_conditions CustomerMedicalCondition[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt @default(now())
// }
