generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Discoveries {
  id                     Int    @id @default(autoincrement())
  email                  String
  typeform_id            String
  BMR                    Int
  carbs_macronutrients   Int
  protein_macronutrients Int
  fat_macronutrients     Int
  carbs_per_meal         Int
  protein_per_meal       Int
  fat_per_meal           Int
  calorie_per_meal       Int
}

model Customers {
  id                                            Int                                            @id @default(autoincrement())
  email                                         String                                         @unique
  phone                                         String?                                        @unique
  phoneStatus                                   ValidStatus?                                   @default(pending)     
  firstName                                     String?
  lastName                                      String?
  middleName                                    String?
  createdAt                                     DateTime                                       @default(now())
  updatedAt                                     DateTime                                       @default(now()) @updatedAt
  activeLevel                                   String?
  gender                                        String?
  mealsPerDay                                   Int?
  age                                           Int?
  heightCm                                      Float?
  weightKg                                      Float?
  uuid                                          String?                                        @unique
  frozenAvailable                               Boolean?                                       @default(false)
  note                                          String?
  coachId                                       Int?
  coach                                         Coach? @relation(fields: [coachId], references: [id])
  customerCoachHistory                          CustomerCoachHistory[]
  customerBoxItems                              CustomerBoxItems[]
  customerFoodLog                               CustomerFoodLog[]
  customerOAuth                                 CustomerOAuth2[]
  customerProductDistances                      CustomerProductDistance[]
  customerSession                               CustomerSession[]
  intermediateCustomerAllergens                 IntermediateCustomerAllergen[]
  intermediateCustomerBoxPlans                  IntermediateCustomerBoxPlan[]
  intermediateCustomerCategoryPreferences       IntermediateCustomerCategoryPreference[]
  intermediateCustomerCoachingPreferences       IntermediateCustomerCoachingPreference[]
  intermediateCustomerFlavorDislikes            IntermediateCustomerFlavorDislike[]
  intermediateCustomerFoodTypes                 IntermediateCustomerFoodType[]
  intermediateCustomerIngredientDislikes        IntermediateCustomerIngredientDislike[]
  intermediateCustomerMedicalConditions         IntermediateCustomerMedicalCondition[]
  intermediateCustomerNutritionNeeds            IntermediateCustomerNutritionNeed[]
  intermediateCustomerUnavailableCookingMethods IntermediateCustomerUnavailableCookingMethod[]
  practitionerCustomerOrderHistory              PractitionerCustomerOrderHistory[]
  queuedShopifyOrder                            QueuedShopifyOrder[]
  surveyQuestionAnswer                          SurveyQuestionAnswer[]
  terraCustomer                                 TerraCustomer?
  customerEventLog  CustomerEventLog []
  intermediateCustomerSequenceBasedAutoMessageHistory IntermediateCustomerSequenceBasedAutoMessageHistory[]
  messageTimePreference MessageTimePreference @default(at18)
  coachingSubscribed ActiveStatus @default(inactive)
  boxSubscribed ActiveStatus @default(inactive)
  twilioChannelSid String? 
  sequenceBasedAutoMessageInterval Int  @default(7)
}

enum ValidStatus {
  valid
  invalid
  pending
}

model CustomerEventLog {
  id Int @id @default(autoincrement())
  customerId Int
  customer   Customers @relation(fields: [customerId], references: [id])
  eventDate    DateTime   @default(now())
  type  EventType
}

enum EventType {
  coachingSubscribed
  coachingUnsubscribed
  boxSubscribed
  boxUnsubscribed
}

enum MediaType {
  mp3
  mp4
  image
  webPage
}

enum MessageTimePreference {
  at0
  at3
  at6
  at9
  at12
  at15
  at18
  at21
}

model PurchaseDateBasedMessage {
  id  Int  @id @default(autoincrement())
  delayDaysSincePurchase Int
  purchaseDateBasedAutoMessageContent PurchaseDateBasedAutoMessageContent[]
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model PurchaseDateBasedAutoMessageMedia {
  id  Int  @id @default(autoincrement())
  urlTemplate String
  type MediaType
  purchaseDateBasedAutoMessageContent   PurchaseDateBasedAutoMessageContent @relation(fields: [purchaseDateBasedAutoMessageContentId], references: [id])
  purchaseDateBasedAutoMessageContentId Int
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}


model PurchaseDateBasedAutoMessageContent {
  id  Int  @id @default(autoincrement())
  body String
  purchaseDateBasedAutoMessageMedia PurchaseDateBasedAutoMessageMedia[]
  purchaseDateBasedMessage   PurchaseDateBasedMessage @relation(fields: [purchaseDateBasedMessageId], references: [id])
  purchaseDateBasedMessageId Int
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model SequenceBasedAutoMessage {
  id  Int  @id @default(autoincrement())
  sequence Int
  sequenceBasedAutoMessageContent SequenceBasedAutoMessageContent[]
  intermediateCustomerSequenceBasedAutoMessageHistory IntermediateCustomerSequenceBasedAutoMessageHistory[]
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model SequenceBasedAutoMessageContent {
  id  Int  @id @default(autoincrement())
  body String
  sequenceBasedAutoMessageMedia SequenceBasedAutoMessageMedia[]
  sequenceBasedAutoMessage   SequenceBasedAutoMessage @relation(fields: [SequenceBasedAutoMessageId], references: [id])
  SequenceBasedAutoMessageId Int
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model SequenceBasedAutoMessageMedia {
  id  Int  @id @default(autoincrement())
  urlTemplate String
  type MediaType
  SequenceBasedAutoMessageContent   SequenceBasedAutoMessageContent @relation(fields: [sequenceBasedAutoMessageContentId], references: [id])
  sequenceBasedAutoMessageContentId Int
  createdAt  DateTime  @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
}

model IntermediateCustomerSequenceBasedAutoMessageHistory {
  sequenceBasedAutoMessageId Int
  customerId        Int
  sentAt         DateTime        @default(now())
  sequenceBasedAutoMessage   SequenceBasedAutoMessage @relation(fields: [sequenceBasedAutoMessageId], references: [id])
  customer          Customers       @relation(fields: [customerId], references: [id])

  @@id([sequenceBasedAutoMessageId, customerId])
}

model TemporaryPrePurchaseAnswer {
  id                                            Int                                            @id @default(autoincrement())
  answerIdentifier String   @unique
  email String 
  diabetes    Json?
  gender  Json?
  height  Json?
  weight  Json?
  age   Json?
  medicalConditions   Json?
  activeLevel   Json?
  A1c   Json?
  mealsPerDay   Json?
  categoryPreferences   Json?
  flavorDislikes  Json?
  ingredientDislikes  Json?
  allergens   Json?
  unavailableCookingMethods   Json?
  boxPlan   Json?
  createdAt                                     DateTime                                       @default(now())
  updatedAt                                     DateTime                                       @default(now()) @updatedAt
}

model CustomerOAuth2 {
  id             Int           @id @default(autoincrement())
  customerId     Int
  provider       OAuthProvider
  /// @encrypted <- annotate fields to encrypt
  accessToken    String
  /// @encrypted <- annotate fields to encrypt
  refreshToken   String
  tokenExpiredAt DateTime?
  tokenType      TokenType
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  customer       Customers     @relation(fields: [customerId], references: [id])

  @@unique([customerId, provider], name: "CustomerOAuthIdentifier")
}

model CustomerSession {
  id            Int       @id @default(autoincrement())
  customerId    Int
  /// @encrypted
  sessionId     String    @unique
  /// @encryption:hash(sessionId)
  sessionIdHash String?   @unique
  expiredAt     DateTime?
  activeUntil   DateTime  @default(dbgenerated("(now() + '1 year'::interval)"))
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  customer      Customers @relation(fields: [customerId], references: [id])
}

model TerraCustomer {
  id               Int                @id @default(autoincrement())
  customerId       Int                @unique
  terraCustomerId  String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  customer         Customers          @relation(fields: [customerId], references: [id])
  terraCustomerLog TerraCustomerLog[]
}

model TerraCustomerLog {
  id                 Int           @id @default(autoincrement())
  terraCustomerKeyId Int
  timestamp          DateTime
  timestampUtc       DateTime
  glucoseValue       Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt
  terraCustomer      TerraCustomer @relation(fields: [terraCustomerKeyId], references: [id])
}

model CustomerFoodLog {
  id           Int       @id @default(autoincrement())
  customerId   Int
  timestampUtc DateTime
  productId    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  customer     Customers @relation(fields: [customerId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])
}

model IntermediateCustomerBoxPlan {
  customerBoxPlanId Int
  customerId        Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  customerBoxPlan   CustomerBoxPlan @relation(fields: [customerBoxPlanId], references: [id])
  customer          Customers       @relation(fields: [customerId], references: [id])

  @@id([customerBoxPlanId, customerId])
}

model CustomerBoxPlan {
  id                           Int                           @id @default(autoincrement())
  name                         String                        @unique
  label                        String
  soupCount                    Int                           @default(0)
  snackCount                   Int                           @default(0)
  sweetsCount                  Int                           @default(0)
  dinnerCount                  Int                           @default(0)
  breakfastCount               Int                           @default(0)
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @default(now()) @updatedAt
  intermediateCustomerBoxPlans IntermediateCustomerBoxPlan[]
}

model IntermediateCustomerNutritionNeed {
  customerNutritionNeedId Int
  customerId              Int
  nutritionValue          Int
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @default(now()) @updatedAt
  customer                Customers             @relation(fields: [customerId], references: [id])
  customerNutritionNeed   CustomerNutritionNeed @relation(fields: [customerNutritionNeedId], references: [id])

  @@id([customerNutritionNeedId, customerId])
}

model CustomerNutritionNeed {
  id                                Int                                 @id @default(autoincrement())
  label                             String
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @default(now()) @updatedAt
  name                              String                              @unique
  intermediateCustomerNutritionNeed IntermediateCustomerNutritionNeed[]
}

model IntermediateCustomerMedicalCondition {
  medicalConditionValue      String
  customerMedicalConditionId Int
  customerId                 Int
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @default(now()) @updatedAt
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerMedicalCondition   CustomerMedicalCondition @relation(fields: [customerMedicalConditionId], references: [id])

  @@id([customerMedicalConditionId, customerId])
}

model CustomerMedicalCondition {
  id                                    Int                                    @id @default(autoincrement())
  label                                 String
  createdAt                             DateTime                               @default(now())
  updatedAt                             DateTime                               @default(now()) @updatedAt
  name                                  String                                 @unique
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
}

model IntermediateCustomerFoodType {
  productFoodTypeId Int
  customerId        Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  customer          Customers       @relation(fields: [customerId], references: [id])
  productFoodType   ProductFoodType @relation(fields: [productFoodTypeId], references: [id])

  @@id([productFoodTypeId, customerId])
}

model ProductFoodType {
  id                            Int                            @id @default(autoincrement())
  label                         String
  name                          String                         @unique
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @default(now()) @updatedAt
  intermediateCustomerFoodTypes IntermediateCustomerFoodType[]
  intermediateProductFoodTypes  IntermediateProductFoodType[]
}

model IntermediateProductFoodType {
  productId         Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  productFoodTypeId Int
  productFoodType   ProductFoodType @relation(fields: [productFoodTypeId], references: [id])
  product           Product         @relation(fields: [productId], references: [id])

  @@id([productFoodTypeId, productId])
}

model Product {
  id                                  Int                                   @id @default(autoincrement())
  updatedAt                           DateTime                              @default(now()) @updatedAt
  createdAt                           DateTime                              @default(now())
  productFlavorId                     Int?
  upcCode                             String?
  externalSku                         String                                @unique
  productProviderId                   Int
  productCategoryId                   Int?
  productVendorId                     Int?
  label                               String
  name                                String
  MSP                                 Float?
  WSP                                 Float?
  expertComment                       String?
  allergenLabel                       String?
  ingredientLabel                     String?
  activeStatus                        ActiveStatus?                         @default(active)
  mainProductImageId                  Int?                                  @unique
  preservationStyle                   PreservationStyle?                    @default(normal)
  glucoseValues                       Json?
  weight                              Float?
  mainProductImage                    ProductImage?                         @relation("mainProductImage", fields: [mainProductImageId], references: [id])
  productCategory                     ProductCategory?                      @relation(fields: [productCategoryId], references: [id])
  productFlavor                       ProductFlavor?                        @relation(fields: [productFlavorId], references: [id])
  productProvider                     ProductProvider                       @relation(fields: [productProviderId], references: [id])
  productVendor                       ProductVendor?                        @relation(fields: [productVendorId], references: [id])
  customerBoxItems                    CustomerBoxItems[]
  customerFoodLog                     CustomerFoodLog[]
  customerProductDistances            CustomerProductDistance[]
  intermediateMasterMonthlyBoxProduct IntermediateMasterMonthlyBoxProduct[]
  intermediatePractitionerBoxProduct  IntermediatePractitionerBoxProduct[]
  intermediateProductAllergens        IntermediateProductAllergen[]
  intermediateProductCookingMethods   IntermediateProductCookingMethod[]
  intermediateProductFoodTypes        IntermediateProductFoodType[]
  intermediateProductIngredients      IntermediateProductIngredient[]
  productImages                       ProductImage[]
  productNutritionFact                ProductNutritionFact?
  surveyQuestionAnswer                SurveyQuestionAnswer[]
}

model ProductImage {
  id               Int      @id @default(autoincrement())
  productId        Int
  src              String
  position         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  product          Product  @relation(fields: [productId], references: [id])
  mainProductImage Product? @relation("mainProductImage")
}

model IntermediateProductCookingMethod {
  productId              Int
  productCookingMethodId Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  productCookingMethod   ProductCookingMethod @relation(fields: [productCookingMethodId], references: [id])
  product                Product              @relation(fields: [productId], references: [id])

  @@id([productId, productCookingMethodId])
}

model IntermediateCustomerUnavailableCookingMethod {
  customerId             Int
  productCookingMethodId Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  customer               Customers            @relation(fields: [customerId], references: [id])
  productCookingMethod   ProductCookingMethod @relation(fields: [productCookingMethodId], references: [id])

  @@id([customerId, productCookingMethodId])
}

model ProductCookingMethod {
  id                                            Int                                            @id @default(autoincrement())
  label                                         String
  name                                          String                                         @unique
  createdAt                                     DateTime                                       @default(now())
  updatedAt                                     DateTime                                       @default(now()) @updatedAt
  intermediateCustomerUnavailableCookingMethods IntermediateCustomerUnavailableCookingMethod[]
  intermediateProductCookingMethods             IntermediateProductCookingMethod[]
}

model ProductFlavor {
  id                                 Int                                 @id @default(autoincrement())
  label                              String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @default(now()) @updatedAt
  name                               String                              @unique
  intermediateCustomerFlavorDislikes IntermediateCustomerFlavorDislike[]
  products                           Product[]
}

model ProductVendor {
  id        Int       @id @default(autoincrement())
  label     String
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
}

model IntermediateCustomerFlavorDislike {
  productFlavorId Int
  customerId      Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  customer        Customers     @relation(fields: [customerId], references: [id])
  productFlavor   ProductFlavor @relation(fields: [productFlavorId], references: [id])

  @@id([productFlavorId, customerId])
}

model ProductCategory {
  id                                      Int                                      @id @default(autoincrement())
  label                                   String
  createdAt                               DateTime                                 @default(now())
  updatedAt                               DateTime                                 @default(now()) @updatedAt
  name                                    String                                   @unique
  src                                     String?
  activeStatus                            ActiveStatus                             @default(active)
  intermediateCustomerCategoryPreferences IntermediateCustomerCategoryPreference[]
  products                                Product[]
}

model IntermediateCustomerCategoryPreference {
  productCategoryId Int
  customerId        Int
  rank              Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  customer          Customers       @relation(fields: [customerId], references: [id])
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])

  @@id([productCategoryId, customerId])
}
model IntermediateCustomerCoachingPreference {
  customerId               Int
  coachingPreferenceId     Int
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt
  customer                 Customers          @relation(fields: [customerId], references: [id])
  coachingPreference       CoachingPreference @relation(fields: [coachingPreferenceId], references: [id])
  @@id([coachingPreferenceId, customerId])
}

model CoachingPreference {
  id                       Int                                     @id @default(autoincrement())
  name                     String                                  @unique
  label                    String
  createdAt                DateTime                                @default(now())
  updatedAt                DateTime                                @default(now()) @updatedAt
  intermediateCustomerCoachingPreference IntermediateCustomerCoachingPreference[]
}

model IntermediateProductIngredient {
  productId           Int
  productIngredientId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  product             Product           @relation(fields: [productId], references: [id])
  productIngredient   ProductIngredient @relation(fields: [productIngredientId], references: [id])

  @@id([productId, productIngredientId])
}

model ProductIngredient {
  id                                     Int                                     @id @default(autoincrement())
  label                                  String
  createdAt                              DateTime                                @default(now())
  updatedAt                              DateTime                                @default(now()) @updatedAt
  name                                   String                                  @unique
  parentIngredientId                     Int?
  intermediateCustomerIngredientDislikes IntermediateCustomerIngredientDislike[]
  intermediateProductIngredients         IntermediateProductIngredient[]
}

model IntermediateCustomerIngredientDislike {
  productIngredientId Int
  customerId          Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
  customer            Customers         @relation(fields: [customerId], references: [id])
  productIngredient   ProductIngredient @relation(fields: [productIngredientId], references: [id])

  @@id([productIngredientId, customerId])
}

model IntermediateProductAllergen {
  productId         Int
  productAllergenId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  productAllergen   ProductAllergen @relation(fields: [productAllergenId], references: [id])
  product           Product         @relation(fields: [productId], references: [id])

  @@id([productId, productAllergenId])
}

model ProductAllergen {
  id                            Int                            @id @default(autoincrement())
  label                         String
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @default(now()) @updatedAt
  name                          String                         @unique
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  intermediateProductAllergens  IntermediateProductAllergen[]
}

model IntermediateCustomerAllergen {
  customerId        Int
  productAllergenId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  customer          Customers       @relation(fields: [customerId], references: [id])
  productAllergen   ProductAllergen @relation(fields: [productAllergenId], references: [id])

  @@id([customerId, productAllergenId])
}

model ProductNutritionFact {
  id                 Int      @id @default(autoincrement())
  productId          Int      @unique
  quantity           Int?
  servingSize        Int?
  calories           Int?
  totalFatG          Float?
  saturatedFatG      Float?
  transFatG          Float?
  cholesteroleMg     Float?
  sodiumMg           Float?
  totalCarbohydrateG Float?
  dietaryFiberG      Float?
  totalSugarG        Float?
  addedSugarG        Float?
  proteinG           Float?
  sweet              Int?
  sour               Int?
  salty              Int?
  bitter             Int?
  spicy              Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  texture            String?
  sugarAlcoholG      Float?
  product            Product  @relation(fields: [productId], references: [id])
}

model ProductProvider {
  id        Int       @id @default(autoincrement())
  provider  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
}

model Survey {
  id                          Int                          @id @default(autoincrement())
  name                        String                       @unique
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  label                       String
  intermediateSurveyQuestions IntermediateSurveyQuestion[]
}

model IntermediateSurveyQuestion {
  surveyId         Int
  surveyQuestionId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  displayOrder     Int?
  survey           Survey         @relation(fields: [surveyId], references: [id])
  surveyQuestion   SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])

  @@id([surveyId, surveyQuestionId])
}

model SurveyQuestion {
  id                          Int                          @id @default(autoincrement())
  name                        String                       @unique
  label                       String
  questionCategoryId          Int
  mustBeAnswered              Boolean
  instruction                 String?
  placeholder                 String?
  surveyQuestionAnswerTypeId  Int
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  activeStatus                ActiveStatus                 @default(active)
  questionCategory            QuestionCategory             @relation(fields: [questionCategoryId], references: [id])
  surveyQuestionAnswerType    SurveyQuestionAnswerType     @relation(fields: [surveyQuestionAnswerTypeId], references: [id])
  intermediateSurveyQuestions IntermediateSurveyQuestion[]
  surveyQuestionAnswer        SurveyQuestionAnswer[]
  surveyQuestionOptions       SurveyQuestionOption[]
}

model QuestionCategory {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  label           String
  name            String           @unique
  surveyQuestions SurveyQuestion[]
}

model SurveyQuestionAnswerType {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  name            String           @unique
  label           String
  surveyQuestions SurveyQuestion[]
}

model SurveyQuestionOption {
  id                                      Int                                       @id @default(autoincrement())
  label                                   String
  surveyQuestionId                        Int
  createdAt                               DateTime                                  @default(now())
  updatedAt                               DateTime                                  @default(now()) @updatedAt
  name                                    String
  surveyQuestion                          SurveyQuestion                            @relation(fields: [surveyQuestionId], references: [id])
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
  surveyQuestionAnswer                    SurveyQuestionAnswer[]

  @@unique([name, surveyQuestionId], name: "QuestionOptionIdentifier")
}

model SurveyQuestionAnswer {
  id                                      Int                                       @id @default(autoincrement())
  customerId                              Int
  surveyQuestionId                        Int
  answerSingleOptionId                    Int?
  answerNumeric                           Int?
  answerText                              String?
  answerBool                              Boolean?
  reason                                  String?
  title                                   String?
  content                                 String?
  answerCount                             Int?
  productId                               Int?
  orderNumber                             String?
  glucoseImpact                           Int?                                      // -1: NOT_SURE, 1: YES, 2: NO
  createdAt                               DateTime                                  @default(now())
  updatedAt                               DateTime                                  @default(now()) @updatedAt
  responseId                              String?                                   @unique
  answerOption                            SurveyQuestionOption?                     @relation(fields: [answerSingleOptionId], references: [id])
  customer                                Customers                                 @relation(fields: [customerId], references: [id])
  product                                 Product?                                  @relation(fields: [productId], references: [id])
  surveyQuestion                          SurveyQuestion                            @relation(fields: [surveyQuestionId], references: [id])
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
}

model IntermediateSurveyQuestionAnswerProduct {
  surveyQuestionOptionId Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt
  surveyQuestionAnswerId Int
  surveyQuestionAnswer   SurveyQuestionAnswer @relation(fields: [surveyQuestionAnswerId], references: [id])
  surveyQuestionOption   SurveyQuestionOption @relation(fields: [surveyQuestionOptionId], references: [id])

  @@id([surveyQuestionAnswerId, surveyQuestionOptionId])
}

model CustomerProductDistance {
  id         Int       @id @default(autoincrement())
  distance   Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  customerId Int
  productId  Int
  version    DateTime  @default(now())
  customer   Customers @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

model CustomerBoxItems {
  id         Int       @id @default(autoincrement())
  productId  Int
  customerId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  customer   Customers @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

model QueuedShopifyOrder {
  id          Int         @id @default(autoincrement())
  orderName   String      @unique
  customerId  Int
  scheduledAt String
  status      QueueStatus @default(scheduled)
  fulfilledAt String?
  orderedAt   String?
  customer    Customers   @relation(fields: [customerId], references: [id])
}

model Practitioner {
  id                      Int                      @id @default(autoincrement())
  uuid                    String                   @unique
  email                   String                   @unique
  firstName               String
  lastName                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  profileImage            String?
  message                 String?
  middleName              String?
  practitionerBox         PractitionerBox[]
  practitionerSocialMedia PractitionerSocialMedia?
}

model PractitionerSocialMedia {
  id             Int          @id @default(autoincrement())
  practitionerId Int          @unique
  instagram      String?
  facebook       String?
  twitter        String?
  website        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  practitioner   Practitioner @relation(fields: [practitionerId], references: [id])
}

model PractitionerBox {
  id                                 Int                                  @id @default(autoincrement())
  practitionerId                     Int
  label                              String
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime                             @default(now()) @updatedAt
  uuid                               String                               @unique
  note                               String?
  description                        String?
  masterMonthlyBoxId                 Int?
  masterMonthlyBox                   MasterMonthlyBox?                    @relation(fields: [masterMonthlyBoxId], references: [id])
  practitioner                       Practitioner                         @relation(fields: [practitionerId], references: [id])
  intermediatePractitionerBoxProduct IntermediatePractitionerBoxProduct[]
  practitionerCustomerOrderHistory   PractitionerCustomerOrderHistory[]

  @@unique([practitionerId, label], name: "PractitionerBoxIdentifier")
}

model IntermediatePractitionerBoxProduct {
  practitionerBoxId Int
  productId         Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  practitionerBox   PractitionerBox @relation(fields: [practitionerBoxId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id])

  @@id([practitionerBoxId, productId])
}

model PractitionerCustomerOrderHistory {
  id                Int             @id @default(autoincrement())
  customerId        Int
  practitionerBoxId Int
  orderNumber       String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  transactionPrice  Float
  status            QueueStatus
  customer          Customers       @relation(fields: [customerId], references: [id])
  practitionerBox   PractitionerBox @relation(fields: [practitionerBoxId], references: [id])
}

model MasterMonthlyBox {
  id                                  Int                                   @id @default(autoincrement())
  label                               String                                @unique
  description                         String?
  note                                String?
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @default(now()) @updatedAt
  intermediateMasterMonthlyBoxProduct IntermediateMasterMonthlyBoxProduct[]
  practitionerBox                     PractitionerBox[]
}

model IntermediateMasterMonthlyBoxProduct {
  masterMonthlyBoxId Int
  productId          Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now()) @updatedAt
  masterMonthlyBox   MasterMonthlyBox @relation(fields: [masterMonthlyBoxId], references: [id])
  product            Product          @relation(fields: [productId], references: [id])

  @@id([masterMonthlyBoxId, productId])
}

model CronMetadata {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  lastRunAt     DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  webhookEvents WebhookEvents[]
}

model WebhookEvents {
  id               Int          @id @default(autoincrement())
  apiId            String
  cronMetadataName String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now()) @updatedAt
  cronMetadata     CronMetadata @relation(fields: [cronMetadataName], references: [name])

  @@unique([apiId, cronMetadataName], name: "WebhookIdentifier")
}

model CustomerSessionStore {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model CustomerCoachHistory{
  customerId            Int
  coachId Int
  startDate DateTime  @default(now())
  endDate DateTime?
  coach   Coach @relation(fields: [coachId], references: [id])
  customer Customers  @relation(fields: [customerId], references: [id])

  @@id([customerId, coachId])
}

model Coach {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  phone String?
  customer Customers[]
  customerCoachHistory CustomerCoachHistory[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
}

enum OAuthProvider {
  google
}

enum TokenType {
  bearer
}

enum PreservationStyle {
  normal
  refrigerated
  frozen
}

enum QueueStatus {
  scheduled
  ordered
  fulfilled
  canceled
}

enum ActiveStatus {
  active
  inactive
  pending
}
