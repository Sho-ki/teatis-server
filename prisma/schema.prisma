// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Discoveries {
  id        Int       @default(autoincrement()) @id
  email     String
  typeform_id   String
  BMR Int
  carbs_macronutrients    Int
  protein_macronutrients  Int
  fat_macronutrients Int
  carbs_per_meal Int
  protein_per_meal Int
  fat_per_meal Int
  calorie_per_meal Int
}

model Customers{
  id                      Int             @default(autoincrement()) @id
  uuid String? @unique
  email                   String @unique
  age Int?
  weightKg Float?
  heightCm Float?
  gender String?
  activeLevel String?
  mealsPerDay Int?
  frozenAvailable Boolean? @default(false)
  intermediateCustomerBoxPlans IntermediateCustomerBoxPlan[]
  intermediateCustomerNutritionNeeds IntermediateCustomerNutritionNeed[]
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  surveyQuestionAnswer SurveyQuestionAnswer[]
  customerProductDistances CustomerProductDistance[]
  customerBoxItems CustomerBoxItems[]
  queuedShopifyOrder QueuedShopifyOrder[]
  intermediateCustomerFlavorDislikes IntermediateCustomerFlavorDislike[]
  intermediateCustomerCategoryPreferences IntermediateCustomerCategoryPreference[]
  intermediateCustomerIngredientDislikes IntermediateCustomerIngredientDislike[]
  intermediateCustomerFoodTypes IntermediateCustomerFoodType[]
  intermediateCustomerUnavailableCookingMethods IntermediateCustomerUnavailableCookingMethod[]
  practitionerCustomerOrderHistory PractitionerCustomerOrderHistory[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerBoxPlan{
  customerBoxPlan    CustomerBoxPlan   @relation(fields: [customerBoxPlanId], references: [id])
  customerBoxPlanId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerBoxPlanId, customerId])
}

model CustomerBoxPlan {
  id            Int       @default(autoincrement()) @id
  name   String @unique
  label     String
  intermediateCustomerBoxPlans      IntermediateCustomerBoxPlan[]
  soupCount Int @default(0)
  snackCount Int @default(0)
  sweetsCount Int @default(0)
  dinnerCount Int @default(0)
  breakfastCount Int @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerNutritionNeed{
  customerNutritionNeed   CustomerNutritionNeed   @relation(fields: [customerNutritionNeedId], references: [id])
  customerNutritionNeedId Int
  customer                Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  nutritionValue            Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerNutritionNeedId, customerId])
}

model CustomerNutritionNeed{
  id            Int       @default(autoincrement()) @id
  name   String @unique
  label     String 
  intermediateCustomerNutritionNeed      IntermediateCustomerNutritionNeed[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerMedicalCondition{
  medicalConditionValue String
  customerMedicalCondition   CustomerMedicalCondition @relation(fields: [customerMedicalConditionId], references: [id])
  customerMedicalConditionId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerMedicalConditionId, customerId])
}


model CustomerMedicalCondition{
  id    Int     @default(autoincrement()) @id
  name   String @unique
  label String  
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerFoodType{
  productFoodType    ProductFoodType   @relation(fields: [productFoodTypeId], references: [id])
  productFoodTypeId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFoodTypeId, customerId])
}

model ProductFoodType{
  id            Int       @default(autoincrement()) @id
  label         String 
  name String @unique
  intermediateCustomerFoodTypes IntermediateCustomerFoodType[]
  intermediateProductFoodTypes IntermediateProductFoodType[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateProductFoodType{
  productFoodType    ProductFoodType   @relation(fields: [productFoodTypeId], references: [id])
  productFoodTypeId Int
  product                   Product                @relation(fields: [productId], references: [id])
  productId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFoodTypeId, productId])
}

model Product{
  id                  Int             @default(autoincrement()) @id
  activeStatus  ActiveStatus? @default(active)
  preservationStyle  PreservationStyle? @default(normal)
  name String?
  label String?
  ingredientLabel String?
  allergenLabel String?
  expertComment String?
  productProvider     ProductProvider @relation(fields: [productProviderId], references: [id])
  productProviderId  Int
  productCategory ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
  productFlavor ProductFlavor? @relation(fields: [productFlavorId], references: [id])
  productFlavorId Int?
  productVendor ProductVendor? @relation(fields: [productVendorId], references: [id])
  productVendorId Int?
  intermediateProductFoodTypes IntermediateProductFoodType[]
  intermediateProductIngredients IntermediateProductIngredient[]	
  intermediateProductAllergens IntermediateProductAllergen[]
  intermediateProductCookingMethods IntermediateProductCookingMethod[]
  intermediatePractitionerBoxProduct IntermediatePractitionerBoxProduct[]
  intermediateMasterMonthlyBoxProduct IntermediateMasterMonthlyBoxProduct[]
  productNutritionFact ProductNutritionFact?
  externalSku   String @unique
  upcCode  String?
  MSP Float?
  WSP Float?
  surveyQuestionAnswer SurveyQuestionAnswer[]
  customerProductDistances CustomerProductDistance[]
  customerBoxItems CustomerBoxItems[]
  productImages ProductImage[] 
  mainProductImage ProductImage? @relation(name: "mainProductImage", fields: [mainProductImageId], references: [id]) 
  mainProductImageId Int? @unique 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}



enum PreservationStyle {
  normal
  refrigerated
  frozen
}

model ProductImage{
  id  Int   @default(autoincrement()) @id
  product Product @relation(fields: [productId], references: [id])
  productId Int
  mainProductImage Product? @relation(name: "mainProductImage")
  src String
  position Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateProductCookingMethod{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productCookingMethod   ProductCookingMethod   @relation(fields: [productCookingMethodId], references: [id])
  productCookingMethodId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productCookingMethodId])
}

model IntermediateCustomerUnavailableCookingMethod{
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  productCookingMethod   ProductCookingMethod   @relation(fields: [productCookingMethodId], references: [id])
  productCookingMethodId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerId, productCookingMethodId])
}

model ProductCookingMethod{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  intermediateProductCookingMethods IntermediateProductCookingMethod[]
  intermediateCustomerUnavailableCookingMethods IntermediateCustomerUnavailableCookingMethod[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model ProductFlavor{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  products   Product[]
  intermediateCustomerFlavorDislikes IntermediateCustomerFlavorDislike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProductVendor{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  products   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateCustomerFlavorDislike{
  productFlavor ProductFlavor @relation(fields: [productFlavorId], references: [id])
  productFlavorId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFlavorId, customerId])
}


model ProductCategory{
  id       Int         @default(autoincrement()) @id
  label String 
  name  String @unique
  src String?
  products   Product[]
  intermediateCustomerCategoryPreferences IntermediateCustomerCategoryPreference[]
  activeStatus  ActiveStatus @default(active)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateCustomerCategoryPreference{
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  rank Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productCategoryId, customerId])
}


model IntermediateProductIngredient{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productIngredient   ProductIngredient   @relation(fields: [productIngredientId], references: [id])
  productIngredientId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productIngredientId])
}

model ProductIngredient{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  intermediateProductIngredients IntermediateProductIngredient[]
  intermediateCustomerIngredientDislikes IntermediateCustomerIngredientDislike[]
  parentIngredientId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerIngredientDislike{
  productIngredient ProductIngredient @relation(fields: [productIngredientId], references: [id])
  productIngredientId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productIngredientId, customerId])
}

model IntermediateProductAllergen{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productAllergenId])
}

model ProductAllergen{
  id       Int         @default(autoincrement()) @id
  label String
  name String  @unique
  intermediateProductAllergens IntermediateProductAllergen[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerAllergen{
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerId, productAllergenId])
}


model ProductNutritionFact{
  id                  Int             @default(autoincrement()) @id
  product   Product @relation(fields: [productId], references: [id])
  productId Int @unique
  quantity	Int? 
  servingSize	Int? 
  calories Int?
  totalFatG Float?
  saturatedFatG Float?
  transFatG	Float? 
  cholesteroleMg	Float?
  sodiumMg	Float?
  totalCarbohydrateG	Float?
  dietaryFiberG	Float?
  totalSugarG	Float?
  addedSugarG	Float?
  proteinG	Float?
  sweet	Int?
  sour	Int?
  salty	Int?
  bitter	Int?
  spicy	Int?
  texture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProductProvider{
  id       Int         @default(autoincrement()) @id
  provider String  @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Survey{
  id                              Int       @default(autoincrement()) @id
  name String @unique
  label String
  intermediateSurveyQuestions IntermediateSurveyQuestion[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model IntermediateSurveyQuestion{
  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId Int
  displayOrder Int?
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyId, surveyQuestionId])
}

model SurveyQuestion{
  id  Int   @default(autoincrement()) @id
  name String @unique
  label String 
  questionCategory QuestionCategory @relation(fields: [questionCategoryId], references: [id])
  questionCategoryId Int
  mustBeAnswered Boolean
  instruction String?
  placeholder String?
  surveyQuestionAnswerType SurveyQuestionAnswerType @relation(fields: [surveyQuestionAnswerTypeId], references: [id])
  surveyQuestionAnswerTypeId Int
  intermediateSurveyQuestions IntermediateSurveyQuestion[]
  surveyQuestionOptions SurveyQuestionOption[]
  surveyQuestionAnswer SurveyQuestionAnswer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model QuestionCategory {
  id  Int   @default(autoincrement()) @id
  label String 
  name String @unique
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionAnswerType{
  id  Int   @default(autoincrement()) @id
  name String @unique
  label String
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionOption{
  id  Int   @default(autoincrement()) @id
  label String
  name String
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  surveyQuestionAnswer SurveyQuestionAnswer[]
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

   @@unique([name, surveyQuestionId], name: "QuestionOptionIdentifier")
}



model SurveyQuestionAnswer{
  id  Int   @default(autoincrement()) @id
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
  responseId String? @unique
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  answerOption SurveyQuestionOption? @relation(fields: [answerSingleOptionId], references: [id])
  answerSingleOptionId Int?
  answerNumeric Int?
  answerText String?
  answerBool Boolean?
  reason String?
  title String?
  content String?
  answerCount Int?
  product Product? @relation(fields: [productId], references: [id])
  productId Int?
  orderNumber String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now()) 

}

model IntermediateSurveyQuestionAnswerProduct{
  surveyQuestionAnswer SurveyQuestionAnswer @relation(fields: [surveyQuestionAnswerId], references: [id])
  surveyQuestionAnswerId Int
  surveyQuestionOption SurveyQuestionOption @relation(fields: [surveyQuestionOptionId], references: [id])
  surveyQuestionOptionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyQuestionAnswerId, surveyQuestionOptionId])
}

model CustomerProductDistance{
  id  Int   @default(autoincrement()) @id
  distance Float
  product Product @relation(fields: [productId], references: [id])
  productId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  version   DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model CustomerBoxItems{
  id  Int   @default(autoincrement()) @id
  product Product @relation(fields: [productId], references: [id])
  productId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model QueuedShopifyOrder {
  id  Int   @default(autoincrement()) @id
  customerId Int
  orderName String @unique
  status QueueStatus @default(scheduled)
  customer Customers @relation(fields: [customerId], references: [id])
  scheduledAt String
  orderedAt String?
  fulfilledAt String?
}

enum QueueStatus {
  scheduled
  ordered
  fulfilled
  canceled
}

model Practitioner{
  id  Int @default(autoincrement()) @id
  uuid  String @unique
  email String @unique
  profileImage String?
  message String?
  firstName String
  middleName String?
  lastName String?
  practitionerBox PractitionerBox[]
  practitionerSocialMedia PractitionerSocialMedia?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PractitionerSocialMedia{
  id  Int @default(autoincrement()) @id
  practitioner Practitioner @relation(fields: [practitionerId], references: [id])
  practitionerId Int @unique
  instagram String?
  facebook String?
  twitter String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PractitionerBox{
  id  Int @default(autoincrement()) @id
  uuid String @unique
  practitioner Practitioner @relation(fields: [practitionerId], references: [id])
  practitionerId Int
  practitionerCustomerOrderHistory PractitionerCustomerOrderHistory[]
  label String
  description String?
  note String?
  masterMonthlyBox MasterMonthlyBox? @relation(fields: [masterMonthlyBoxId], references: [id])
  masterMonthlyBoxId Int?
  intermediatePractitionerBoxProduct IntermediatePractitionerBoxProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

 @@unique([practitionerId, label], name: "PractitionerBoxIdentifier")
}

model IntermediatePractitionerBoxProduct{
  practitionerBox PractitionerBox @relation(fields: [practitionerBoxId], references: [id])
  practitionerBoxId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([practitionerBoxId, productId])
}

model PractitionerCustomerOrderHistory{
  id  Int @default(autoincrement()) @id
  customer  Customers @relation(fields: [customerId], references: [id])
  customerId  Int
  practitionerBox PractitionerBox @relation(fields: [practitionerBoxId], references: [id])
  practitionerBoxId Int
  orderNumber String @unique
  transactionPrice Float
  status QueueStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

enum ActiveStatus {
  active
  inactive
}

model MasterMonthlyBox{
  id  Int @default(autoincrement()) @id
  label String @unique
  intermediateMasterMonthlyBoxProduct IntermediateMasterMonthlyBoxProduct[]
  description String?
  note String?
  practitionerBox PractitionerBox[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model IntermediateMasterMonthlyBoxProduct{
  masterMonthlyBox MasterMonthlyBox @relation(fields: [masterMonthlyBoxId], references: [id])
  masterMonthlyBoxId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([masterMonthlyBoxId, productId])
}
