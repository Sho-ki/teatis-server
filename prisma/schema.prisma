// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Discoveries {
  id        Int       @default(autoincrement()) @id
  email     String
  typeform_id   String
  BMR Int
  carbs_macronutrients    Int
  protein_macronutrients  Int
  fat_macronutrients Int
  carbs_per_meal Int
  protein_per_meal Int
  fat_per_meal Int
  calorie_per_meal Int
}

model Customers{
  id                      Int             @default(autoincrement()) @id
  email                   String @unique
  age Int?
  weightKg Float?
  heightCm Float?
  gender String?
  activeLevel String?
  mealsPerDay Int?
  intermediateCustomerNutritionNeeds IntermediateCustomerNutritionNeed[]
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  customerProductDistance CustomerProductDistance[]
  customerBoxItems CustomerBoxItems[]
  queuedShopifyOrder QueuedShopifyOrder[]
  intermediateCustomerFlavorDislike IntermediateCustomerFlavorDislike[]
  intermediateCustomerCategoryPreference IntermediateCustomerCategoryPreference[]
  intermediateCustomerIngredientDislike IntermediateCustomerIngredientDislike[]
  intermediateCustomerFoodType IntermediateCustomerFoodType[]
  intermediateCustomerUnavailableCookMethod IntermediateCustomerUnavailableCookMethod[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerNutritionNeed{
  customerNutritionNeed    CustomerNutritionNeed   @relation(fields: [customerNutritionNeedId], references: [id])
  customerNutritionNeedId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  nutritionValue            Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerNutritionNeedId, customerId])
}

model CustomerNutritionNeed{
  id            Int       @default(autoincrement()) @id
  name   String @unique
  label     String 
  intermediateCustomerNutritionNeed      IntermediateCustomerNutritionNeed[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateCustomerMedicalCondition{
  medicalConditionValue String
  customerMedicalCondition CustomerMedicalCondition @relation(fields: [customerMedicalConditionId], references: [id])
  customerMedicalConditionId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerMedicalConditionId, customerId])
}


model CustomerMedicalCondition{
  id    Int     @default(autoincrement()) @id
  name   String @unique
  label String  
  intermediateCustomerMedicalConditions IntermediateCustomerMedicalCondition[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerFoodType{
  productFoodType    ProductFoodType   @relation(fields: [productFoodTypeId], references: [id])
  productFoodTypeId Int
  customer                   Customers                @relation(fields: [customerId], references: [id])
  customerId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFoodTypeId, customerId])
}

model ProductFoodType{
  id            Int       @default(autoincrement()) @id
  label         String 
  name String @unique
  intermediateCustomerFoodType IntermediateCustomerFoodType[]
  intermediateProductFoodType IntermediateProductFoodType[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateProductFoodType{
  productFoodType    ProductFoodType   @relation(fields: [productFoodTypeId], references: [id])
  productFoodTypeId Int
  product                   Product                @relation(fields: [productId], references: [id])
  productId                Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFoodTypeId, productId])
}

model Product{
  id                  Int             @default(autoincrement()) @id
  name String?
  label String?
  expertComment String?
  productProvider     ProductProvider @relation(fields: [productProviderId], references: [id])
  productProviderId  Int
  productCategory ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
  productFlavor ProductFlavor? @relation(fields: [productFlavorId], references: [id])
  productFlavorId Int?
  productVendor ProductVendor? @relation(fields: [productVendorId], references: [id])
  productVendorId Int?
  intermediateProductFoodType IntermediateProductFoodType[]
  intermediateProductIngredients IntermediateProductIngredient[]	
  intermediateProductAllergens IntermediateProductAllergen[]
  intermediateProductCookMethod IntermediateProductCookMethod[]
  productNutritionFact ProductNutritionFact?
  externalSku   String @unique
  upcCode  String?
  MSP Float?
  WSP Float?
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  customerProductDistance CustomerProductDistance[]
  customerBoxItems CustomerBoxItems[]
  productImages ProductImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProductImage{
  id  Int   @default(autoincrement()) @id
  product Product @relation(fields: [productId], references: [id])
  productId Int
  src String
  position Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model IntermediateProductCookMethod{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productCookMethod   ProductCookMethod   @relation(fields: [productCookMethodId], references: [id])
  productCookMethodId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productCookMethodId])
}

model IntermediateCustomerUnavailableCookMethod{
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  productCookMethod   ProductCookMethod   @relation(fields: [productCookMethodId], references: [id])
  productCookMethodId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerId, productCookMethodId])
}

model ProductCookMethod{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  intermediateProductCookMethod IntermediateProductCookMethod[]
  intermediateCustomerUnavailableCookMethod IntermediateCustomerUnavailableCookMethod[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model ProductFlavor{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  products   Product[]
  intermediateCustomerFlavorDislike IntermediateCustomerFlavorDislike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProductVendor{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  products   Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateCustomerFlavorDislike{
  productFlavor ProductFlavor @relation(fields: [productFlavorId], references: [id])
  productFlavorId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productFlavorId, customerId])
}


model ProductCategory{
  id       Int         @default(autoincrement()) @id
  label String 
  name  String @unique
  src String?
  products   Product[]
  intermediateCustomerCategoryPreference IntermediateCustomerCategoryPreference[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model IntermediateCustomerCategoryPreference{
  productCategory ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  rank Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productCategoryId, customerId])
}


model IntermediateProductIngredient{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productIngredient   ProductIngredient   @relation(fields: [productIngredientId], references: [id])
  productIngredientId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productIngredientId])
}

model ProductIngredient{
  id       Int         @default(autoincrement()) @id
  label String 
  name String @unique
  intermediateProductIngredients IntermediateProductIngredient[]
  intermediateCustomerIngredientDislike IntermediateCustomerIngredientDislike[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerIngredientDislike{
  productIngredient ProductIngredient @relation(fields: [productIngredientId], references: [id])
  productIngredientId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productIngredientId, customerId])
}

model IntermediateProductAllergen{
  product Product @relation(fields: [productId], references: [id])
  productId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([productId, productAllergenId])
}

model ProductAllergen{
  id       Int         @default(autoincrement()) @id
  label String
  name String  @unique
  intermediateProductAllergens IntermediateProductAllergen[]
  intermediateCustomerAllergens IntermediateCustomerAllergen[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model IntermediateCustomerAllergen{
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  productAllergen   ProductAllergen   @relation(fields: [productAllergenId], references: [id])
  productAllergenId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([customerId, productAllergenId])
}


model ProductNutritionFact{
  id                  Int             @default(autoincrement()) @id
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity	Int? 
  servingSize	Int? 
  calories Int?
  totalFatG Float?
  saturatedFatG Float?
  transFatG	Float? 
  cholesteroleMg	Float?
  sodiumMg	Float?
  totalCarbohydrateG	Float?
  dietaryFiberG	Float?
  totalSugarG	Float?
  addedSugarG	Float?
  proteinG	Float?
  sweet	Int?
  sour	Int?
  salty	Int?
  bitter	Int?
  spicy	Int?
  texture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ProductProvider{
  id       Int         @default(autoincrement()) @id
  provider String  @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Survey{
  id                              Int       @default(autoincrement()) @id
  name String @unique
  label String
  intermediateSurveyQuestion IntermediateSurveyQuestion[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model IntermediateSurveyQuestion{
  survey Survey @relation(fields: [surveyId], references: [id])
  surveyId Int
  order Int?
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyId, surveyQuestionId])
}

model SurveyQuestion{
  id  Int   @default(autoincrement()) @id
  name String @unique
  label String 
  questionCategory QuestionCategory @relation(fields: [questionCategoryId], references: [id])
  questionCategoryId Int
  mustBeAnswered Boolean
  instruction String?
  placeholder String?
  surveyQuestionAnswerType SurveyQuestionAnswerType @relation(fields: [surveyQuestionAnswerTypeId], references: [id])
  surveyQuestionAnswerTypeId Int
  intermediateSurveyQuestion IntermediateSurveyQuestion[]
  surveyQuestionOptions SurveyQuestionOption[]
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model QuestionCategory {
  id  Int   @default(autoincrement()) @id
  label String 
  name String @unique
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionAnswerType{
  id  Int   @default(autoincrement()) @id
  name String @unique
  label String
  surveyQuestions SurveyQuestion[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model SurveyQuestionOption{
  id  Int   @default(autoincrement()) @id
  label String
  name String
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback[]
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback[]
  intermediateSurveyQuestionAnswerService IntermediateSurveyQuestionAnswerService[]
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

   @@unique([name, surveyQuestionId], name: "QuestionOptionIdentifier")
}

model SurveyQuestionAnswerServiceFeedback{
  id  Int   @default(autoincrement()) @id
  intermediateSurveyQuestionAnswerService IntermediateSurveyQuestionAnswerService[]
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  answerOption SurveyQuestionOption? @relation(fields: [answerSingleOptionId], references: [id])
  answerSingleOptionId Int?
  answerNumeric Int?
  answerText String?
  answerBool Boolean?
  reason String?
  title String?
  content String?
  answerCount Int?
  shopifyOrderNumber String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@unique([surveyQuestionId,shopifyOrderNumber], name: "CustomerSurveyQuestionServiceFeedbackIdentifier")
}

model IntermediateSurveyQuestionAnswerService{
  surveyQuestionAnswerServiceFeedback SurveyQuestionAnswerServiceFeedback @relation(fields: [surveyQuestionAnswerServiceFeedbackId], references: [id])
  surveyQuestionAnswerServiceFeedbackId Int
  surveyQuestionOption SurveyQuestionOption @relation(fields: [surveyQuestionOptionId], references: [id])
  surveyQuestionOptionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyQuestionAnswerServiceFeedbackId, surveyQuestionOptionId])
}

model SurveyQuestionAnswerProductFeedback{
  id  Int   @default(autoincrement()) @id
  intermediateSurveyQuestionAnswerProduct IntermediateSurveyQuestionAnswerProduct[]
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  surveyQuestion SurveyQuestion @relation(fields: [surveyQuestionId], references: [id])
  surveyQuestionId Int
  answerOption SurveyQuestionOption? @relation(fields: [answerSingleOptionId], references: [id])
  answerSingleOptionId Int?
  answerNumeric Int?
  answerText String?
  answerBool Boolean?
  reason String?
  title String?
  content String?
  answerCount Int?
  product Product @relation(fields: [productId], references: [id])
  productId Int
  shopifyOrderNumber String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@unique([surveyQuestionId,shopifyOrderNumber, productId], name: "CustomerSurveyQuestionProductFeedbackIdentifier")

}

model IntermediateSurveyQuestionAnswerProduct{
  surveyQuestionAnswerProductFeedback SurveyQuestionAnswerProductFeedback @relation(fields: [surveyQuestionAnswerProductFeedbackId], references: [id])
  surveyQuestionAnswerProductFeedbackId Int
  surveyQuestionOption SurveyQuestionOption @relation(fields: [surveyQuestionOptionId], references: [id])
  surveyQuestionOptionId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())

  @@id([surveyQuestionAnswerProductFeedbackId, surveyQuestionOptionId])
}

model CustomerProductDistance{
  id  Int   @default(autoincrement()) @id
  distance Float
  product Product @relation(fields: [productId], references: [id])
  productId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  version   DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model CustomerBoxItems{
  id  Int   @default(autoincrement()) @id
  product Product @relation(fields: [productId], references: [id])
  productId Int
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}


model QueuedShopifyOrder {
  id  Int   @default(autoincrement()) @id
  orderName String @unique
  customer Customers @relation(fields: [customerId], references: [id])
  customerId Int
  scheduledAt String
  status QueueStatus @default(queue)
  completedAt String?
}

enum QueueStatus {
  queue
  complete
}
